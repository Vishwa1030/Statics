# -*- coding: utf-8 -*-
"""Copy of numpy  ufuncs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zFtSFYHrxMsPZx1GjXmWHLmBDmWYsHlx
"""

import numpy as np

np.random.seed(0)
def compute_reciprocals(values):
     output = np.empty(len(values))
     for i in range(len(values)):
       output[i] = 1.0 / values[i]
       return output

values = np.random.randint(1, 10, size=5)
compute_reciprocals(values)



# Commented out IPython magic to ensure Python compatibility.
 big_array = np.random.randint(1, 100, size=1000000)
# %timeit compute_reciprocals(big_array)

# Commented out IPython magic to ensure Python compatibility.
#  %timeit (1.0 / big_array)

np.arange(5) / np.arange(1, 6)

x = np.arange(4)
print("x =", x)
print("x + 5 =", x + 5)
print("x - 5 =", x - 5)
print("x * 2 =", x * 2)
print("x / 2 =", x / 2)
print("x // 2 =", x // 2)

print("-x = ", -x)
print("x ** 2 = ", x ** 2)
print("x % 2 = ", x % 2)

-(0.5*x + 1) ** 2

np.add(x, 2)

x = np.array([-2, -1, 0, 1, 2])
abs(x)

np.absolute(x)

np.abs(x)

x = np.array([3 - 4j, 4 - 3j, 2 + 0j, 0 + 1j])
np.abs(x)

theta = np.linspace(0, np.pi, 3)
print("theta = ", theta)
print("sin(theta) = ", np.sin(theta))
print("cos(theta) = ", np.cos(theta))
print("tan(theta) = ", np.tan(theta))

x = [-1, 0, 1]
print("x = ", x)
print("arcsin(x) = ", np.arcsin(x))
print("arccos(x) = ", np.arccos(x))
print("arctan(x) = ", np.arctan(x))

x = [1, 2, 3]
print("x =", x)
print("e^x =", np.exp(x))
print("2^x =", np.exp2(x))
print("3^x =", np.power(3, x))

x = [1, 2, 4, 10]
print("x =", x)
print("ln(x) =", np.log(x))
print("log2(x) =", np.log2(x))
print("log10(x) =", np.log10(x))

x = [0, 0.001, 0.01, 0.1]
print("exp(x) - 1 =", np.expm1(x))
print("log(1 + x) =", np.log1p(x))

import scipy

from scipy import special

x = [1, 5, 10]
print("gamma(x) =", special.gamma(x))
print("ln|gamma(x)| =", special.gammaln(x))
print("beta(x, 2) =", special.beta(x, 2))

x = np.array([0, 0.3, 0.7, 1.0])
print("erf(x) =", special.erf(x))
print("erfc(x) =", special.erfc(x))
print("erfinv(x) =", special.erfinv(x))

x = np.arange(5)
y = np.empty(5)
np.multiply(x, 10, out=y)
print(y)

y = np.zeros(10)
np.power(2, x, out=y[::2])
print(y)

x = np.arange(1, 6)
np.add.reduce(x)

np.multiply.reduce(x)

np.add.accumulate(x)

np.multiply.accumulate(x)

x = np.arange(1, 6)
np.multiply.outer(x, x)

L = np.random.random(100)
sum(L)

np.sum(L)

# Commented out IPython magic to ensure Python compatibility.
big_array = np.random.rand(1000000)
# %timeit sum(big_array)
# %timeit np.sum(big_array)

min(big_array), max(big_array)

np.min(big_array), np.max(big_array)

# Commented out IPython magic to ensure Python compatibility.
# %timeit min(big_array)
# %timeit np.min(big_array)

print(big_array.min(), big_array.max(), big_array.sum())

M = np.random.random((3, 4))
print(M)

M.sum()

M.min(axis=0)

M.max(axis=1)





